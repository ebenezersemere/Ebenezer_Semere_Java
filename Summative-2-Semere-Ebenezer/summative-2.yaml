openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /publisher/{id}:
    get:
      tags:
        - publisher-controller
      operationId: getPublisherById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Publisher'
    put:
      tags:
        - publisher-controller
      operationId: updatePublisher
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - publisher-controller
      operationId: deletePublisher
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /book/{id}:
    get:
      tags:
        - book-controller
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
    put:
      tags:
        - book-controller
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - book-controller
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /author/{id}:
    get:
      tags:
        - author-controller
      operationId: getAuthorById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Author'
    put:
      tags:
        - author-controller
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - author-controller
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: No Content
  /publisher:
    post:
      tags:
        - publisher-controller
      operationId: createPublisher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Publisher'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Publisher'
  /book:
    post:
      tags:
        - book-controller
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Book'
  /author:
    get:
      tags:
        - author-controller
      operationId: getAllAuthors
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    post:
      tags:
        - author-controller
      operationId: createAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        '201':
          description: Created
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Author'
  /publishers:
    get:
      tags:
        - publisher-controller
      operationId: getAllPublishers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Publisher'
  /books:
    get:
      tags:
        - book-controller
      operationId: getAllBooks
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /books/author/{authorId}:
    get:
      tags:
        - book-controller
      operationId: getBooksByAuthorId
      parameters:
        - name: authorId
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
components:
  schemas:
    Book:
      type: object
      properties:
        bookId:
          type: integer
          format: int32
        isbn:
          type: string
        publishDate:
          type: string
          format: date
        authorId:
          type: integer
          format: int32
        title:
          type: string
        publisherId:
          type: integer
          format: int32
        price:
          type: number
    Publisher:
      type: object
      properties:
        publisherId:
          type: integer
          format: int32
        name:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        phone:
          type: string
        email:
          type: string
        books:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Book'
    Author:
      type: object
      properties:
        authorId:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        phone:
          type: string
        email:
          type: string
        books:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Book'
